# PySNMP SMI module. Autogenerated from smidump -f python CISCO-ST-TC
# by libsmi2pysnmp-0.1.3 at Wed Apr  8 22:57:23 2015,
# Python version (2, 6, 6, 'final', 0)

# Imports

( Integer, ObjectIdentifier, OctetString, ) = mibBuilder.importSymbols("ASN1", "Integer", "ObjectIdentifier", "OctetString")
( NamedValues, ) = mibBuilder.importSymbols("ASN1-ENUMERATION", "NamedValues")
( ConstraintsIntersection, ConstraintsUnion, SingleValueConstraint, ValueRangeConstraint, ValueSizeConstraint, ) = mibBuilder.importSymbols("ASN1-REFINEMENT", "ConstraintsIntersection", "ConstraintsUnion", "SingleValueConstraint", "ValueRangeConstraint", "ValueSizeConstraint")
( ciscoModules, ) = mibBuilder.importSymbols("CISCO-SMI", "ciscoModules")
( Bits, Integer32, Integer32, ModuleIdentity, MibIdentifier, TimeTicks, ) = mibBuilder.importSymbols("SNMPv2-SMI", "Bits", "Integer32", "Integer32", "ModuleIdentity", "MibIdentifier", "TimeTicks")
( TextualConvention, ) = mibBuilder.importSymbols("SNMPv2-TC", "TextualConvention")

# Types

class DomainId(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,239)
    
class DomainIdOrZero(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(0,239)
    
class FcAddress(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(3,3),ValueSizeConstraint(8,8),)
    
class FcAddressId(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(3,3)
    fixedLength = 3
    
class FcAddressType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,)
    namedValues = NamedValues(("wwn", 1), ("fcid", 2), )
    
class FcClassOfServices(Bits):
    namedValues = NamedValues(("classF", 0), ("class1", 1), ("class2", 2), ("class3", 3), ("class4", 4), ("class5", 5), ("class6", 6), )
    
class FcIfServiceStateType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(2,1,)
    namedValues = NamedValues(("inService", 1), ("outOfService", 2), )
    
class FcIfSfpDiagLevelType(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(3,6,5,1,2,4,)
    namedValues = NamedValues(("unknown", 1), ("normal", 2), ("lowWarning", 3), ("lowAlarm", 4), ("highWarning", 5), ("highAlarm", 6), )
    
class FcIfSpeed(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(11,1,8,9,10,2,7,6,3,5,4,)
    namedValues = NamedValues(("auto", 1), ("sixteenG", 10), ("autoMaxSixteenG", 11), ("oneG", 2), ("twoG", 3), ("fourG", 4), ("autoMaxTwoG", 5), ("eightG", 6), ("autoMaxFourG", 7), ("tenG", 8), ("autoMaxEightG", 9), )
    
class FcNameId(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(8,8)
    fixedLength = 8
    
class FcNameIdOrZero(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ConstraintsUnion(ValueSizeConstraint(0,0),ValueSizeConstraint(8,8),ValueSizeConstraint(16,16),)
    
class FcPortModuleTypes(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(16,13,17,8,7,3,19,1,2,20,14,11,18,9,10,15,5,4,6,12,)
    namedValues = NamedValues(("unknown", 1), ("xfp", 10), ("x2Short", 11), ("x2Medium", 12), ("x2Tall", 13), ("xpakShort", 14), ("xpakMedium", 15), ("xpakTall", 16), ("xenpak", 17), ("sfpDwdm", 18), ("qsfp", 19), ("other", 2), ("x2Dwdm", 20), ("gbic", 3), ("embedded", 4), ("glm", 5), ("gbicWithSerialID", 6), ("gbicWithoutSerialID", 7), ("sfpWithSerialID", 8), ("sfpWithoutSerialID", 9), )
    
class FcPortTxTypes(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(1,2,3,6,7,5,10,4,11,8,9,12,)
    namedValues = NamedValues(("unknown", 1), ("tenGigBaseSw", 10), ("tenGigBaseLw", 11), ("tenGigBaseEw", 12), ("longWaveLaser", 2), ("shortWaveLaser", 3), ("longWaveLaserCostReduced", 4), ("electrical", 5), ("tenGigBaseSr", 6), ("tenGigBaseLr", 7), ("tenGigBaseEr", 8), ("tenGigBaseLx4", 9), )
    
class FcPortTypes(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(9,14,6,7,18,1,2,11,5,8,3,16,15,10,13,4,12,17,)
    namedValues = NamedValues(("auto", 1), ("nlPort", 10), ("nxPort", 11), ("tePort", 12), ("fvPort", 13), ("portOperDown", 14), ("stPort", 15), ("npPort", 16), ("tfPort", 17), ("tnpPort", 18), ("fPort", 2), ("flPort", 3), ("ePort", 4), ("bPort", 5), ("fxPort", 6), ("sdPort", 7), ("tlPort", 8), ("nPort", 9), )
    
class InterfaceOperMode(Integer):
    subtypeSpec = Integer.subtypeSpec+SingleValueConstraint(21,2,5,8,19,16,12,18,10,13,11,9,6,7,1,3,15,17,14,4,20,)
    namedValues = NamedValues(("auto", 1), ("nlPort", 10), ("nxPort", 11), ("tePort", 12), ("fvPort", 13), ("portOperDown", 14), ("stPort", 15), ("mgmtPort", 16), ("ipsPort", 17), ("evPort", 18), ("npPort", 19), ("fPort", 2), ("tfPort", 20), ("tnpPort", 21), ("flPort", 3), ("ePort", 4), ("bPort", 5), ("fxPort", 6), ("sdPort", 7), ("tlPort", 8), ("nPort", 9), )
    
class PortMemberList(OctetString):
    subtypeSpec = OctetString.subtypeSpec+ValueSizeConstraint(0,64)
    
class VsanIndex(Integer32):
    subtypeSpec = Integer32.subtypeSpec+ValueRangeConstraint(1,4094)
    

# Objects

storageTextualConventions = ModuleIdentity((1, 3, 6, 1, 4, 1, 9, 12, 4)).setRevisions(("2012-08-08 00:00","2011-07-26 00:00","2010-12-24 00:00","2008-05-16 00:00","2005-12-17 00:00","2004-05-18 00:00","2003-09-26 00:00","2003-08-07 00:00","2002-10-04 00:00","2002-09-24 00:00",))
if mibBuilder.loadTexts: storageTextualConventions.setOrganization("Cisco Systems, Inc.")
if mibBuilder.loadTexts: storageTextualConventions.setContactInfo("Cisco Systems\nCustomer Service\nPostal: 170 W Tasman Drive\nSan Jose, CA  95134\nUSA\nTel: +1 800 553 -NETS\nE-mail: cs-san@cisco.com")
if mibBuilder.loadTexts: storageTextualConventions.setDescription("This module defines textual conventions used in\nStorage Area Network technology specific mibs.")

# Augmentions

# Exports

# Module identity
mibBuilder.exportSymbols("CISCO-ST-TC", PYSNMP_MODULE_ID=storageTextualConventions)

# Types
mibBuilder.exportSymbols("CISCO-ST-TC", DomainId=DomainId, DomainIdOrZero=DomainIdOrZero, FcAddress=FcAddress, FcAddressId=FcAddressId, FcAddressType=FcAddressType, FcClassOfServices=FcClassOfServices, FcIfServiceStateType=FcIfServiceStateType, FcIfSfpDiagLevelType=FcIfSfpDiagLevelType, FcIfSpeed=FcIfSpeed, FcNameId=FcNameId, FcNameIdOrZero=FcNameIdOrZero, FcPortModuleTypes=FcPortModuleTypes, FcPortTxTypes=FcPortTxTypes, FcPortTypes=FcPortTypes, InterfaceOperMode=InterfaceOperMode, PortMemberList=PortMemberList, VsanIndex=VsanIndex)

# Objects
mibBuilder.exportSymbols("CISCO-ST-TC", storageTextualConventions=storageTextualConventions)

